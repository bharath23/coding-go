package educative0010

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestSolution(t *testing.T) {
	tests := []struct {
		name   string
		input1 []string
		input2 [][]int
		want   [][]int
	}{
		{
			name:   "test1",
			input1: []string{"FreqStack", "push()", "push()", "push()", "push()", "pop()"},
			input2: [][]int{nil, {5}, {7}, {7}, {5}, nil},
			want:   [][]int{nil, nil, nil, nil, nil, {5}},
		},
		{
			name:   "test2",
			input1: []string{"FreqStack", "push()", "push()", "push()", "push()", "pop()"},
			input2: [][]int{nil, {5}, {7}, {7}, {14}, nil},
			want:   [][]int{nil, nil, nil, nil, nil, {7}},
		},
		{
			name:   "test3",
			input1: []string{"FreqStack", "push()", "pop()"},
			input2: [][]int{nil, {4}, nil},
			want:   [][]int{nil, nil, {4}},
		},
		{
			name:   "test4",
			input1: []string{"FreqStack", "push()", "push()", "push()", "pop()", "push()", "push()", "push()", "pop()", "pop()"},
			input2: [][]int{nil, {5}, {4}, {9}, nil, {3}, {7}, {5}, nil, nil},
			want:   [][]int{nil, nil, nil, nil, {9}, nil, nil, nil, {5}, {7}},
		},
		{
			name:   "test5",
			input1: []string{"FreqStack", "push()", "pop()", "push()", "push()", "pop()"},
			input2: [][]int{nil, {5}, nil, {4}, {1}, nil},
			want:   [][]int{nil, nil, {5}, nil, nil, {1}},
		},
		{
			name:   "test6",
			input1: []string{"FreqStack", "push()", "push()", "pop()", "push()", "push()", "push()", "pop()", "pop()", "push()", "pop()", "push()", "pop()", "push()", "pop()", "pop()", "pop()", "push()", "push()", "pop()", "push()", "push()", "pop()", "pop()", "push()", "push()", "pop()", "pop()", "pop()", "push()", "pop()", "push()", "push()", "push()", "pop()", "pop()", "push()", "push()", "pop()", "push()", "push()", "pop()", "pop()", "push()", "pop()", "push()", "pop()", "push()", "push()", "push()", "push()", "push()", "push()", "pop()", "pop()", "push()", "pop()", "pop()", "pop()", "push()", "pop()", "pop()", "pop()", "push()", "pop()", "pop()", "pop()", "push()", "pop()", "push()", "pop()", "push()", "pop()", "push()", "pop()", "push()", "push()", "push()", "pop()", "push()", "push()", "pop()", "push()", "push()", "pop()", "pop()", "push()", "pop()", "pop()", "pop()", "pop()", "push()", "pop()", "push()", "pop()", "push()", "push()", "push()", "pop()", "push()", "push()", "push()", "push()", "push()", "push()", "push()", "pop()", "push()", "pop()", "pop()", "pop()", "pop()", "pop()", "push()", "pop()", "push()", "push()", "pop()", "push()", "push()", "push()", "pop()", "push()", "push()", "pop()", "pop()", "pop()", "push()", "pop()", "push()", "push()", "push()", "push()", "pop()", "push()", "push()", "push()", "pop()", "pop()", "pop()", "push()", "push()", "push()", "pop()", "push()", "push()", "pop()", "pop()", "pop()", "pop()", "push()", "pop()", "push()", "push()", "pop()", "pop()", "push()", "push()", "pop()", "pop()", "pop()", "push()", "push()", "push()", "pop()", "push()", "push()", "pop()", "push()", "push()", "push()", "pop()", "push()", "push()", "push()", "pop()", "push()", "pop()", "push()", "pop()", "push()", "push()", "push()", "pop()", "push()", "pop()", "pop()", "pop()", "push()", "pop()", "push()", "pop()", "pop()", "push()", "pop()", "push()", "push()", "pop()", "push()", "pop()", "pop()", "push()", "pop()", "pop()", "pop()", "pop()", "pop()", "pop()", "push()", "push()", "push()", "pop()", "push()", "pop()", "pop()", "pop()", "push()", "pop()", "pop()", "push()", "pop()", "push()", "pop()", "push()", "push()", "pop()", "push()", "pop()", "push()", "pop()", "push()", "push()", "push()", "push()", "push()", "push()", "pop()", "pop()", "pop()", "push()", "pop()", "push()", "push()", "pop()", "pop()", "pop()", "pop()", "push()", "push()", "pop()", "push()", "push()", "push()", "pop()", "push()", "push()", "pop()", "push()", "pop()", "pop()", "pop()", "pop()", "pop()", "pop()", "push()", "pop()", "push()", "pop()", "push()", "push()", "push()", "push()", "pop()", "push()", "pop()", "push()", "pop()", "push()", "pop()", "pop()", "push()", "pop()", "push()", "pop()", "push()", "pop()", "pop()", "push()", "push()", "push()", "push()", "push()", "push()", "pop()", "pop()", "pop()", "pop()", "pop()", "push()", "push()", "push()", "push()", "push()", "pop()", "pop()", "push()", "pop()", "push()", "pop()", "pop()", "pop()", "pop()", "pop()", "push()", "pop()", "pop()", "pop()", "push()", "pop()", "push()", "push()", "push()", "push()", "push()", "push()", "push()", "pop()", "push()", "push()", "pop()", "push()", "pop()", "pop()", "pop()", "pop()", "push()", "pop()", "push()", "pop()", "pop()", "pop()", "pop()", "push()", "push()", "pop()", "pop()", "pop()", "pop()", "push()", "pop()", "pop()", "push()", "push()", "pop()", "push()", "pop()", "push()", "pop()", "push()", "pop()", "push()", "pop()", "push()", "push()", "pop()", "push()", "pop()", "push()", "push()", "pop()", "push()", "pop()", "pop()", "push()", "push()", "pop()", "push()", "pop()", "pop()", "pop()", "push()", "pop()", "push()", "pop()", "pop()", "pop()", "pop()", "push()", "push()", "pop()", "pop()", "pop()", "push()", "pop()", "push()", "push()", "pop()", "push()", "push()", "push()", "pop()", "pop()", "push()", "push()", "push()", "push()", "push()", "push()", "push()", "push()", "pop()", "pop()", "pop()", "pop()", "push()", "pop()", "push()", "push()", "pop()", "push()", "pop()", "push()", "push()", "pop()", "pop()", "push()", "pop()", "push()", "pop()", "pop()", "pop()", "pop()", "push()", "push()", "push()", "pop()", "pop()", "pop()", "push()", "pop()", "pop()", "pop()", "push()", "pop()", "pop()", "pop()", "push()", "pop()", "push()", "push()", "pop()", "push()", "pop()", "pop()", "push()", "push()", "pop()", "pop()", "push()", "pop()", "push()", "push()", "push()", "push()", "push()", "pop()", "pop()", "push()", "pop()", "push()", "push()", "pop()", "pop()", "pop()", "pop()", "pop()", "push()", "pop()", "push()", "pop()", "pop()", "push()", "push()", "push()", "push()", "pop()", "push()", "push()", "pop()", "push()", "pop()", "push()", "pop()", "pop()", "push()", "pop()", "pop()", "pop()", "pop()", "push()", "pop()", "pop()", "push()", "pop()", "pop()", "push()", "pop()", "push()", "pop()", "push()", "push()", "pop()", "pop()", "push()", "push()", "push()", "pop()", "push()", "pop()", "pop()", "pop()", "push()", "pop()", "push()", "pop()", "push()", "push()", "push()", "pop()", "push()", "push()", "pop()", "push()", "pop()", "pop()", "pop()", "push()", "pop()", "push()", "push()", "push()", "push()", "push()", "push()", "pop()", "push()", "push()", "pop()", "push()", "pop()", "push()", "pop()", "push()", "push()", "push()", "pop()", "push()", "pop()", "pop()", "push()", "pop()", "push()", "push()", "push()", "push()", "pop()", "pop()", "push()", "pop()", "push()", "push()", "pop()", "push()", "push()", "push()", "pop()", "pop()", "pop()", "push()", "push()", "push()", "pop()", "push()", "pop()", "pop()", "push()", "push()", "push()", "pop()", "push()", "pop()", "pop()", "pop()", "push()", "pop()", "pop()", "push()", "push()", "push()", "pop()", "pop()", "push()", "pop()", "pop()", "pop()", "push()", "pop()", "push()", "pop()", "pop()", "pop()", "pop()", "push()", "push()", "pop()", "push()", "pop()", "push()", "push()", "push()", "pop()", "pop()", "push()", "push()", "push()", "push()", "pop()", "push()", "pop()", "pop()", "pop()", "push()", "push()", "pop()", "push()", "pop()", "push()", "push()", "push()", "push()", "pop()", "pop()", "push()", "push()", "pop()", "pop()", "push()", "push()", "push()", "push()", "push()"},
			input2: [][]int{nil, {8235}, {8235}, nil, {8235}, {8235}, {7648}, nil, nil, {8235}, nil, {8242}, nil, {8235}, nil, nil, nil, {6520}, {4943}, nil, {6520}, {6520}, nil, nil, {6520}, {9468}, nil, nil, nil, {1520}, nil, {1686}, {1686}, {1284}, nil, nil, {6462}, {1549}, nil, {6462}, {6462}, nil, nil, {8847}, nil, {1686}, nil, {6462}, {1686}, {4905}, {6462}, {6462}, {6462}, nil, nil, {1229}, nil, nil, nil, {7341}, nil, nil, nil, {3785}, nil, nil, nil, {7968}, nil, {121}, nil, {1135}, nil, {1373}, nil, {7704}, {2339}, {5842}, nil, {2339}, {2339}, nil, {7704}, {3184}, nil, nil, {8478}, nil, nil, nil, nil, {5447}, nil, {1994}, nil, {641}, {641}, {641}, nil, {8153}, {641}, {641}, {641}, {641}, {529}, {2788}, nil, {529}, nil, nil, nil, nil, nil, {4492}, nil, {641}, {9653}, nil, {4420}, {4420}, {3076}, nil, {4420}, {8153}, nil, nil, nil, {7743}, nil, {641}, {641}, {1948}, {9412}, nil, {641}, {641}, {4151}, nil, nil, nil, {4420}, {7787}, {4420}, nil, {641}, {641}, nil, nil, nil, nil, {641}, nil, {1948}, {7082}, nil, nil, {9275}, {4546}, nil, nil, nil, {7699}, {641}, {641}, nil, {641}, {3378}, nil, {641}, {4420}, {641}, nil, {7699}, {641}, {641}, nil, {7699}, nil, {4420}, nil, {641}, {4420}, {6359}, nil, {8809}, nil, nil, nil, {4645}, nil, {8772}, nil, nil, {1318}, nil, {4}, {9026}, nil, {2926}, nil, nil, {8672}, nil, nil, nil, nil, nil, nil, {4420}, {641}, {641}, nil, {4420}, nil, nil, nil, {641}, nil, nil, {5814}, nil, {9662}, nil, {9044}, {6002}, nil, {1220}, nil, {5191}, nil, {7465}, {7465}, {1637}, {641}, {1637}, {1637}, nil, nil, nil, {3387}, nil, {9044}, {641}, nil, nil, nil, nil, {641}, {3873}, nil, {3916}, {641}, {6179}, nil, {3916}, {641}, nil, {5006}, nil, nil, nil, nil, nil, nil, {4420}, nil, {862}, nil, {641}, {2659}, {641}, {641}, nil, {4448}, nil, {3129}, nil, {8995}, nil, nil, {5890}, nil, {2659}, nil, {689}, nil, nil, {715}, {641}, {4420}, {3468}, {5228}, {4420}, nil, nil, nil, nil, nil, {4220}, {1678}, {3355}, {4420}, {8153}, nil, nil, {8419}, nil, {2535}, nil, nil, nil, nil, nil, {9044}, nil, nil, nil, {641}, nil, {641}, {641}, {9858}, {2281}, {641}, {641}, {1357}, nil, {448}, {2845}, nil, {8477}, nil, nil, nil, nil, {8638}, nil, {7420}, nil, nil, nil, nil, {6386}, {641}, nil, nil, nil, nil, {1552}, nil, nil, {641}, {3566}, nil, {5765}, nil, {8153}, nil, {9113}, nil, {3366}, nil, {641}, {4012}, nil, {4662}, nil, {641}, {8839}, nil, {641}, nil, nil, {7652}, {1235}, nil, {9301}, nil, nil, nil, {641}, nil, {2589}, nil, nil, nil, nil, {641}, {641}, nil, nil, nil, {524}, nil, {8348}, {6372}, nil, {6386}, {3393}, {6946}, nil, nil, {7376}, {4178}, {641}, {2979}, {5498}, {641}, {641}, {8348}, nil, nil, nil, nil, {4136}, nil, {8153}, {8348}, nil, {5117}, nil, {8348}, {6700}, nil, nil, {2979}, nil, {8348}, nil, nil, nil, nil, {3447}, {641}, {3447}, nil, nil, nil, {7376}, nil, nil, nil, {8153}, nil, nil, nil, {1589}, nil, {1892}, {4880}, nil, {641}, nil, nil, {641}, {641}, nil, nil, {4116}, nil, {3560}, {2513}, {4950}, {7313}, {7313}, nil, nil, {4732}, nil, {9801}, {2204}, nil, nil, nil, nil, nil, {5279}, nil, {3994}, nil, nil, {641}, {641}, {9361}, {9361}, nil, {641}, {6600}, nil, {641}, nil, {641}, nil, nil, {1137}, nil, nil, nil, nil, {641}, nil, nil, {641}, nil, nil, {5839}, nil, {639}, nil, {7316}, {7316}, nil, nil, {422}, {422}, {422}, nil, {422}, nil, nil, nil, {9998}, nil, {7159}, nil, {2895}, {2465}, {2583}, nil, {3822}, {7904}, nil, {6732}, nil, nil, nil, {2895}, nil, {7599}, {9792}, {1909}, {2895}, {9792}, {2571}, nil, {6245}, {7863}, nil, {541}, nil, {1909}, nil, {8997}, {1293}, {8997}, nil, {7599}, nil, nil, {6245}, nil, {4864}, {4864}, {9792}, {9792}, nil, nil, {2895}, nil, {1371}, {3611}, nil, {7192}, {6574}, {1061}, nil, nil, nil, {9907}, {9792}, {3588}, nil, {6955}, nil, nil, {2895}, {379}, {8997}, nil, {4864}, nil, nil, nil, {2802}, nil, nil, {3299}, {1078}, {4864}, nil, nil, {9792}, nil, nil, nil, {6245}, nil, {3475}, nil, nil, nil, nil, {1025}, {7519}, nil, {2895}, nil, {9879}, {7001}, {2579}, nil, nil, {2895}, {9792}, {48}, {8517}, nil, {2936}, nil, nil, nil, {5308}, {8105}, nil, {4141}, nil, {540}, {2895}, {32}, {4203}, nil, nil, {540}, {163}, nil, nil, {6245}, {4970}, {5308}, {4323}, {2895}},
			want:   [][]int{nil, nil, nil, {8235}, nil, nil, nil, {8235}, {8235}, nil, {8235}, nil, {8242}, nil, {8235}, {7648}, {8235}, nil, nil, {4943}, nil, nil, {6520}, {6520}, nil, nil, {6520}, {9468}, {6520}, nil, {1520}, nil, nil, nil, {1686}, {1284}, nil, nil, {1549}, nil, nil, {6462}, {6462}, nil, {8847}, nil, {1686}, nil, nil, nil, nil, nil, nil, {6462}, {6462}, nil, {6462}, {1686}, {6462}, nil, {7341}, {1229}, {4905}, nil, {3785}, {6462}, {1686}, nil, {7968}, nil, {121}, nil, {1135}, nil, {1373}, nil, nil, nil, {5842}, nil, nil, {2339}, nil, nil, {7704}, {2339}, nil, {8478}, {3184}, {2339}, {7704}, nil, {5447}, nil, {1994}, nil, nil, nil, {641}, nil, nil, nil, nil, nil, nil, nil, {641}, nil, {641}, {641}, {641}, {529}, {641}, nil, {4492}, nil, nil, {641}, nil, nil, nil, {4420}, nil, nil, {8153}, {4420}, {3076}, nil, {7743}, nil, nil, nil, nil, {641}, nil, nil, nil, {641}, {641}, {641}, nil, nil, nil, {4420}, nil, nil, {641}, {641}, {4420}, {7787}, nil, {641}, nil, nil, {1948}, {7082}, nil, nil, {4546}, {9275}, {4151}, nil, nil, nil, {641}, nil, nil, {641}, nil, nil, nil, {641}, nil, nil, nil, {641}, nil, {641}, nil, {4420}, nil, nil, nil, {641}, nil, {4420}, {7699}, {641}, nil, {7699}, nil, {4420}, {641}, nil, {1318}, nil, nil, {9026}, nil, {2926}, {4}, nil, {8672}, {8772}, {4645}, {8809}, {6359}, {3378}, nil, nil, nil, {641}, nil, {4420}, {641}, {4420}, nil, {641}, {7699}, nil, {5814}, nil, {9662}, nil, nil, {6002}, nil, {1220}, nil, {5191}, nil, nil, nil, nil, nil, nil, {1637}, {1637}, {641}, nil, {7465}, nil, nil, {641}, {9044}, {3387}, {1637}, nil, nil, {641}, nil, nil, nil, {641}, nil, nil, {641}, nil, {3916}, {5006}, {6179}, {3916}, {3873}, {7465}, nil, {4420}, nil, {862}, nil, nil, nil, nil, {641}, nil, {641}, nil, {641}, nil, {8995}, {3129}, nil, {5890}, nil, {2659}, nil, {689}, {4448}, nil, nil, nil, nil, nil, nil, {4420}, {4420}, {641}, {5228}, {3468}, nil, nil, nil, nil, nil, {8153}, {4420}, nil, {8419}, nil, {2535}, {3355}, {1678}, {4220}, {715}, nil, {9044}, {2659}, {9044}, nil, {641}, nil, nil, nil, nil, nil, nil, nil, {641}, nil, nil, {641}, nil, {641}, {641}, {8477}, {2845}, nil, {8638}, nil, {7420}, {448}, {1357}, {2281}, nil, nil, {641}, {6386}, {9858}, {9412}, nil, {1552}, {1948}, nil, nil, {641}, nil, {5765}, nil, {8153}, nil, {9113}, nil, {3366}, nil, nil, {641}, nil, {4662}, nil, nil, {641}, nil, {641}, {8839}, nil, nil, {1235}, nil, {9301}, {7652}, {4012}, nil, {641}, nil, {2589}, {3566}, {4420}, {9653}, nil, nil, {641}, {641}, {2788}, nil, {524}, nil, nil, {6372}, nil, nil, nil, {6946}, {3393}, nil, nil, nil, nil, nil, nil, nil, nil, {641}, {641}, {8348}, {641}, nil, {4136}, nil, nil, {8348}, nil, {8153}, nil, nil, {8348}, {6700}, nil, {2979}, nil, {8348}, {5117}, {5498}, {2979}, nil, nil, nil, {3447}, {641}, {3447}, nil, {7376}, {4178}, {7376}, nil, {8153}, {6386}, {8348}, nil, {1589}, nil, nil, {4880}, nil, {641}, {1892}, nil, nil, {641}, {641}, nil, {4116}, nil, nil, nil, nil, nil, {7313}, {7313}, nil, {4732}, nil, nil, {2204}, {9801}, {4950}, {2513}, {3560}, nil, {5279}, nil, {3994}, {529}, nil, nil, nil, nil, {641}, nil, nil, {641}, nil, {641}, nil, {641}, {9361}, nil, {641}, {1137}, {6600}, {9361}, nil, {641}, {8153}, nil, {641}, {641}, nil, {5839}, nil, {639}, nil, nil, {7316}, {7316}, nil, nil, nil, {422}, nil, {422}, {422}, {422}, nil, {9998}, nil, {7159}, nil, nil, nil, {2583}, nil, nil, {7904}, nil, {6732}, {3822}, {2465}, nil, {2895}, nil, nil, nil, nil, nil, nil, {9792}, nil, nil, {2895}, nil, {541}, nil, {1909}, nil, nil, nil, {8997}, nil, {7599}, {1293}, nil, {6245}, nil, nil, nil, nil, {9792}, {9792}, nil, {2895}, nil, nil, {4864}, nil, nil, nil, {1061}, {6574}, {7192}, nil, nil, nil, {9792}, nil, {6955}, {3588}, nil, nil, nil, {8997}, nil, {4864}, {2895}, {379}, nil, {2802}, {9907}, nil, nil, nil, {4864}, {1078}, nil, {9792}, {3299}, {3611}, nil, {6245}, nil, {3475}, {1371}, {4864}, {8997}, nil, nil, {7519}, nil, {2895}, nil, nil, nil, {2579}, {7001}, nil, nil, nil, nil, {9792}, nil, {2895}, {2936}, {8517}, nil, nil, {8105}, nil, {4141}, nil, nil, nil, nil, {2895}, {4203}, nil, nil, {540}, {163}, nil, nil, nil, nil, nil},
		},
	}

	for _, test := range tests {
		var freqStack *FreqStack
		have := [][]int{}
		for i, inp1 := range test.input1 {
			switch inp1 {
			case "FreqStack":
				freqStack = Constructor()
				have = append(have, nil)
			case "push()":
				freqStack.Push(test.input2[i][0])
				have = append(have, nil)
			case "pop()":
				val := freqStack.Pop()
				have = append(have, []int{val})
			}
		}
		assert.Equalf(t, test.want, have, "%s: incorrect FreqStack implementation", test.name)
	}
}
